/**
 * Functions which extend or refine built in mysql operations.
 * Frequently this includes logging and async/promise functionality
 * 
 * @author Paul lane
 * @since 06.10.2018 (d.m.y)
 */

const mysql = require('mysql');

module.exports.query = query;
module.exports.disconnectMySQL = disconnectMySQL;
module.exports.connectMySQL = connectMySQL;
module.exports.extractResultValues = extractResultValues;

/**
 * Query the current database with the supplied statement and return the
 * results.
 * 
 * @param {mysql.Connection} connection - The connection through which to query
 * @param {string} statement - The statement to query the database with
 */
function query(connection, statement) {
    return new Promise( (resolve, reject) => {
        connection.query(statement, (err, result, fields) => {
            if (err) {
                console.error(`Query failed: `);
                logHumanReadableError(err);
                console.error('For statement: ');
                console.error(statement);
                connection.query('ROLLBACK;');
                connection.end((err) => {
                    console.log('Disconnected from database...');
                });
                process.exit(1);
            } else if (result) {
                console.log('Query successful: ');
                console.log(statement);
            } else if (fields) {
                console.log(fields);
            }
            console.log('');
            resolve(result);
        })
    });
}

/**
 * Log the human readable parts of a MySQL error to stderr.
 * 
 * @param {Error} err - Error generated by a mysql call
 */
function logHumanReadableError(err) {
    console.error(`SQL Error ${err.errno}: ${err.code}`);
    console.error(`Message: ${err.sqlMessage}`);
}

/**
 * End the supplied connection and log disconnection errors.
 * 
 * @param {mysql.Connection} connection 
 */
function disconnectMySQL(connection) {
    return new Promise(resolve =>  connection.end((err) => {
            if(err) {
                console.error("Failed to disconnect from database");
                console.error(err);
                process.exit(1);
            }
            console.log('Disconnected from SQL database...\n');
            resolve();
        })
    );
}

/**
 * Initialize and start a connection to the database with the supplied 
 * credentials
 * 
 * @param {string} userName - Username for the database
 * @param {string} password - Password for the username
 * @param {string} databaseName - Database to connect to
 */
async function connectMySQL(userName, password, databaseName) {
    return new Promise((resolve, reject) => {
            const connection = mysql.createConnection({
                host: 'localhost',
                user: userName,
                password: password,
                database: databaseName
            });
            connection.connect((err) => {
            if (err) {
                console.error('Failed to connect to MySQL\n');
                console.error(err);
            }
            console.log('Connected to SQL database...\n');
            resolve(connection);
        })
    });
}

/**
 * Return the values of the result obtained from a query call.
 * 
 * @param {*} results - Object returned from a query call
 */
function extractResultValues(results) {
    let values = [];
    for(let i = 0; i < results.length; ++i) {
        for(let expression in results[i]) {
            values.push(results[i][expression]);
        }
    }
    return values;
}
